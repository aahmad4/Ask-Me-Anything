{"version":3,"sources":["state/store.js","components/DividerWithText.jsx","components/AlertMessage.jsx","components/LoginModal.jsx","components/RegisterModal.jsx","components/Navbar.jsx","screens/HomeScreen.jsx","App.js","index.js"],"names":["userDetailsFromStorage","localStorage","getItem","JSON","parse","store","createState","userDetails","questions","DividerWithText","children","flexProps","paddingRight","paddingLeft","align","color","flex","borderColor","as","px","useColorModeValue","fontWeight","AlertMessage","status","text","LoginModal","isOpen","setLoginModalOpen","useState","usernameEmail","setUsernameEmail","password","setPassword","error","setError","initialRef","useRef","useHookState","toast","useToast","handleSubmit","a","axios","post","username","email","headers","data","set","setItem","stringify","title","description","message","duration","isClosable","response","onClose","pb","mt","ref","placeholder","value","onChange","e","target","type","onClick","bg","_hover","size","fontSize","width","mb","display","flexDirection","colorScheme","leftIcon","RegisterModal","setRegisterModalOpen","setUsername","setEmail","first_name","last_name","scrollBehavior","Navbar","loginModalOpen","registerModalOpen","mobileNav","useDisclosure","handleLogout","Authorization","get","refresh_token","access_token","logoutData","removeItem","console","log","Fragment","header","w","base","sm","py","shadow","alignItems","justifyContent","mx","Link","to","src","height","alt","h1","ml","spacing","mr","md","variant","href","aria-label","icon","onOpen","pos","top","left","right","p","m","rounded","HomeScreen","App","path","exact","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.df40dc0c.chunk.js","sourcesContent":["import { createState } from '@hookstate/core';\r\n\r\nconst userDetailsFromStorage = localStorage.getItem('userDetails')\r\n  ? JSON.parse(localStorage.getItem('userDetails'))\r\n  : null;\r\n\r\nconst store = createState({\r\n  userDetails: userDetailsFromStorage,\r\n  questions: [],\r\n});\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport { Box, Divider, Flex, Text, useColorModeValue } from '@chakra-ui/react';\r\n\r\nexport default function DividerWithText({ children, ...flexProps }) {\r\n  return (\r\n    <Flex\r\n      paddingRight=\"7\"\r\n      paddingLeft=\"7\"\r\n      align=\"center\"\r\n      color=\"gray.300\"\r\n      {...flexProps}\r\n    >\r\n      <Box flex=\"1\">\r\n        <Divider borderColor=\"currentcolor\" />\r\n      </Box>\r\n      <Text\r\n        as=\"span\"\r\n        px=\"3\"\r\n        color={useColorModeValue('gray.600', 'gray.400')}\r\n        fontWeight=\"medium\"\r\n      >\r\n        {children}\r\n      </Text>\r\n      <Box flex=\"1\">\r\n        <Divider borderColor=\"currentcolor\" />\r\n      </Box>\r\n    </Flex>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Alert, AlertIcon } from '@chakra-ui/react';\r\n\r\nexport default function AlertMessage({ status, text }) {\r\n  return (\r\n    <Alert status={status}>\r\n      <AlertIcon />\r\n      {text}\r\n    </Alert>\r\n  );\r\n}\r\n","import React, { useState, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalCloseButton,\r\n  ModalBody,\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  ModalFooter,\r\n  Center,\r\n  Text,\r\n  useToast,\r\n} from '@chakra-ui/react';\r\nimport { TiSocialTwitter } from 'react-icons/ti';\r\nimport { GoMarkGithub } from 'react-icons/go';\r\nimport { useState as useHookState } from '@hookstate/core';\r\nimport store from '../state/store';\r\nimport DividerWithText from './DividerWithText';\r\nimport AlertMessage from './AlertMessage';\r\n\r\nexport default function LoginModal({ isOpen, setLoginModalOpen }) {\r\n  const [usernameEmail, setUsernameEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [error, setError] = useState(null);\r\n\r\n  const initialRef = useRef();\r\n\r\n  const { userDetails } = useHookState(store);\r\n\r\n  const toast = useToast();\r\n\r\n  const handleSubmit = async () => {\r\n    try {\r\n      const { data } = await axios.post(\r\n        '/api/users/login',\r\n        {\r\n          username: usernameEmail,\r\n          email: usernameEmail,\r\n          password,\r\n        },\r\n        {\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n        }\r\n      );\r\n\r\n      userDetails.set(data);\r\n      localStorage.setItem('userDetails', JSON.stringify(data));\r\n\r\n      setUsernameEmail('');\r\n      setPassword('');\r\n      setError(null);\r\n\r\n      setLoginModalOpen(false);\r\n\r\n      toast({\r\n        title: 'Account authenticated.',\r\n        description: data.message,\r\n        status: 'success',\r\n        duration: 9000,\r\n        isClosable: true,\r\n      });\r\n    } catch (error) {\r\n      setError(error.response.data.message);\r\n      setUsernameEmail('');\r\n      setPassword('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      isOpen={isOpen}\r\n      onClose={() => {\r\n        setLoginModalOpen(false);\r\n        setUsernameEmail('');\r\n        setPassword('');\r\n        setError(null);\r\n      }}\r\n    >\r\n      <ModalOverlay />\r\n      <ModalContent>\r\n        <ModalHeader>Log in to your account</ModalHeader>\r\n        <ModalCloseButton />\r\n        <ModalBody pb={2}>\r\n          {error && <AlertMessage status=\"error\" text={error} />}\r\n          <FormControl mt={error && 4}>\r\n            <FormLabel>Username or Email</FormLabel>\r\n            <Input\r\n              ref={initialRef}\r\n              placeholder=\"Username or Email\"\r\n              value={usernameEmail}\r\n              onChange={e => setUsernameEmail(e.target.value)}\r\n            />\r\n          </FormControl>\r\n\r\n          <FormControl mt={4}>\r\n            <FormLabel>Password</FormLabel>\r\n            <Input\r\n              placeholder=\"Password\"\r\n              type=\"password\"\r\n              value={password}\r\n              onChange={e => setPassword(e.target.value)}\r\n            />\r\n          </FormControl>\r\n        </ModalBody>\r\n\r\n        <ModalFooter>\r\n          <Button\r\n            type=\"submit\"\r\n            onClick={handleSubmit}\r\n            bg={'red.400'}\r\n            _hover={{\r\n              bg: 'red.300',\r\n            }}\r\n            size=\"lg\"\r\n            fontSize=\"md\"\r\n            width=\"100%\"\r\n          >\r\n            Sign in\r\n          </Button>\r\n        </ModalFooter>\r\n        <DividerWithText>or continue with</DividerWithText>\r\n        <ModalFooter mb={2} display=\"flex\" flexDirection=\"column\">\r\n          <Button\r\n            size=\"lg\"\r\n            fontSize=\"md\"\r\n            width=\"100%\"\r\n            colorScheme={'twitter'}\r\n            leftIcon={<TiSocialTwitter />}\r\n          >\r\n            <Center>\r\n              <Text>Sign in with Twitter</Text>\r\n            </Center>\r\n          </Button>\r\n          <Button\r\n            mt={4}\r\n            size=\"lg\"\r\n            fontSize=\"md\"\r\n            width=\"100%\"\r\n            colorScheme={'gray'}\r\n            leftIcon={<GoMarkGithub />}\r\n          >\r\n            <Center>\r\n              <Text>Sign in with GitHub</Text>\r\n            </Center>\r\n          </Button>\r\n        </ModalFooter>\r\n      </ModalContent>\r\n    </Modal>\r\n  );\r\n}\r\n","import React, { useState, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalCloseButton,\r\n  ModalBody,\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  Center,\r\n  Text,\r\n  useToast,\r\n} from '@chakra-ui/react';\r\nimport { TiSocialTwitter } from 'react-icons/ti';\r\nimport { GoMarkGithub } from 'react-icons/go';\r\nimport { useState as useHookState } from '@hookstate/core';\r\nimport store from '../state/store';\r\nimport DividerWithText from './DividerWithText';\r\nimport AlertMessage from './AlertMessage';\r\n\r\nexport default function RegisterModal({ isOpen, setRegisterModalOpen }) {\r\n  const [username, setUsername] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [error, setError] = useState(null);\r\n\r\n  const initialRef = useRef();\r\n\r\n  const { userDetails } = useHookState(store);\r\n\r\n  const toast = useToast();\r\n\r\n  const handleSubmit = async () => {\r\n    try {\r\n      const { data } = await axios.post(\r\n        '/api/users/register',\r\n        {\r\n          username,\r\n          email,\r\n          password,\r\n          first_name: '',\r\n          last_name: '',\r\n        },\r\n        {\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n        }\r\n      );\r\n\r\n      userDetails.set(data);\r\n      localStorage.setItem('userDetails', JSON.stringify(data));\r\n\r\n      setUsername('');\r\n      setEmail('');\r\n      setPassword('');\r\n      setError(null);\r\n\r\n      setRegisterModalOpen(false);\r\n\r\n      toast({\r\n        title: 'Account created.',\r\n        description: data.message,\r\n        status: 'success',\r\n        duration: 9000,\r\n        isClosable: true,\r\n      });\r\n    } catch (error) {\r\n      if (error.response) {\r\n        setError(error.response.data.message);\r\n        setUsername('');\r\n        setEmail('');\r\n        setPassword('');\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      scrollBehavior={'inside'}\r\n      isOpen={isOpen}\r\n      onClose={() => {\r\n        setRegisterModalOpen(false);\r\n        setUsername('');\r\n        setEmail('');\r\n        setPassword('');\r\n        setError(null);\r\n      }}\r\n    >\r\n      <ModalOverlay />\r\n      <ModalContent>\r\n        <ModalHeader>Create your account</ModalHeader>\r\n        <ModalCloseButton />\r\n        <ModalBody pb={2}>\r\n          {error && <AlertMessage status=\"error\" text={error} />}\r\n          <FormControl mt={error && 4}>\r\n            <FormLabel>Username</FormLabel>\r\n            <Input\r\n              ref={initialRef}\r\n              placeholder=\"Username\"\r\n              value={username}\r\n              onChange={e => setUsername(e.target.value)}\r\n            />\r\n          </FormControl>\r\n          <FormControl mt={4}>\r\n            <FormLabel>Email</FormLabel>\r\n            <Input\r\n              placeholder=\"Email\"\r\n              value={email}\r\n              onChange={e => setEmail(e.target.value)}\r\n            />\r\n          </FormControl>\r\n          <FormControl mt={4}>\r\n            <FormLabel>Password</FormLabel>\r\n            <Input\r\n              placeholder=\"Password\"\r\n              type=\"password\"\r\n              value={password}\r\n              onChange={e => setPassword(e.target.value)}\r\n            />\r\n          </FormControl>\r\n          <FormControl mt={6}>\r\n            <Button\r\n              type=\"submit\"\r\n              onClick={handleSubmit}\r\n              bg={'red.400'}\r\n              _hover={{\r\n                bg: 'red.300',\r\n              }}\r\n              size=\"lg\"\r\n              fontSize=\"md\"\r\n              width=\"100%\"\r\n            >\r\n              Sign up\r\n            </Button>\r\n          </FormControl>\r\n          <FormControl mt={4}>\r\n            <DividerWithText>or continue with</DividerWithText>\r\n          </FormControl>\r\n          <FormControl mt={4} mb={4}>\r\n            <Button\r\n              size=\"lg\"\r\n              fontSize=\"md\"\r\n              width=\"100%\"\r\n              colorScheme={'twitter'}\r\n              leftIcon={<TiSocialTwitter />}\r\n            >\r\n              <Center>\r\n                <Text>Sign up with Twitter</Text>\r\n              </Center>\r\n            </Button>\r\n            <Button\r\n              mt={4}\r\n              size=\"lg\"\r\n              fontSize=\"md\"\r\n              width=\"100%\"\r\n              colorScheme={'gray'}\r\n              leftIcon={<GoMarkGithub />}\r\n            >\r\n              <Center>\r\n                <Text>Sign up with GitHub</Text>\r\n              </Center>\r\n            </Button>\r\n          </FormControl>\r\n        </ModalBody>\r\n      </ModalContent>\r\n    </Modal>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { Link } from 'react-router-dom';\r\nimport {\r\n  chakra,\r\n  Box,\r\n  Flex,\r\n  useColorModeValue,\r\n  VisuallyHidden,\r\n  HStack,\r\n  Button,\r\n  useDisclosure,\r\n  VStack,\r\n  IconButton,\r\n  CloseButton,\r\n  useToast,\r\n} from '@chakra-ui/react';\r\nimport { AiOutlineMenu } from 'react-icons/ai';\r\nimport { useState as useHookState } from '@hookstate/core';\r\nimport store from '../state/store';\r\nimport LoginModal from './LoginModal';\r\nimport RegisterModal from './RegisterModal';\r\n\r\nexport default function Navbar() {\r\n  const [loginModalOpen, setLoginModalOpen] = useState(false);\r\n  const [registerModalOpen, setRegisterModalOpen] = useState(false);\r\n\r\n  const bg = useColorModeValue('white', 'gray.800');\r\n  const mobileNav = useDisclosure();\r\n\r\n  const { userDetails } = useHookState(store);\r\n\r\n  const toast = useToast();\r\n\r\n  const handleLogout = async () => {\r\n    try {\r\n      const { data } = await axios.post(\r\n        '/api/users/refresh',\r\n        {},\r\n        {\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${userDetails.get().refresh_token}`,\r\n          },\r\n        }\r\n      );\r\n\r\n      const { data: logoutData } = await axios.post(\r\n        '/api/users/logout',\r\n        {},\r\n        {\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${data.access_token}`,\r\n          },\r\n        }\r\n      );\r\n\r\n      userDetails.set(null);\r\n      localStorage.removeItem('userDetails');\r\n\r\n      toast({\r\n        title: 'Account logged out.',\r\n        description: logoutData.message,\r\n        status: 'success',\r\n        duration: 9000,\r\n        isClosable: true,\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <chakra.header\r\n        bg={bg}\r\n        w=\"full\"\r\n        px={{ base: 2, sm: 4 }}\r\n        py={4}\r\n        shadow=\"md\"\r\n      >\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mx=\"auto\">\r\n          <Flex>\r\n            <chakra.a\r\n              as={Link}\r\n              to=\"/\"\r\n              title=\"Ask Me Anything Home Page\"\r\n              display=\"flex\"\r\n              alignItems=\"center\"\r\n            >\r\n              <img\r\n                src=\"https://hotemoji.com/images/dl/1/question-mark-emoji-by-twitter.png\"\r\n                width=\"30px\"\r\n                height=\"auto\"\r\n                alt=\"Ask Me Anything Question Mark Logo\"\r\n              />\r\n              <VisuallyHidden>Ask Me Anything</VisuallyHidden>\r\n            </chakra.a>\r\n            <chakra.h1\r\n              as={Link}\r\n              to=\"/\"\r\n              fontSize=\"xl\"\r\n              fontWeight=\"medium\"\r\n              ml=\"2\"\r\n            >\r\n              Ask Me Anything\r\n            </chakra.h1>\r\n          </Flex>\r\n          <HStack display=\"flex\" alignItems=\"center\" spacing={1}>\r\n            <HStack\r\n              spacing={1}\r\n              mr={1}\r\n              color=\"brand.500\"\r\n              display={{ base: 'none', md: 'inline-flex' }}\r\n            >\r\n              <Button variant=\"ghost\">Features</Button>\r\n              <Button variant=\"ghost\">Pricing</Button>\r\n              {!userDetails.get() ? (\r\n                <Button variant=\"ghost\" onClick={() => setLoginModalOpen(true)}>\r\n                  Sign in\r\n                </Button>\r\n              ) : (\r\n                <Button variant=\"ghost\">\r\n                  Signed in as {userDetails.get().username}\r\n                </Button>\r\n              )}\r\n            </HStack>\r\n            {!userDetails.get() ? (\r\n              <Button\r\n                onClick={() => setRegisterModalOpen(true)}\r\n                color={'white'}\r\n                bg={'red.400'}\r\n                href={'#'}\r\n                _hover={{\r\n                  bg: 'red.300',\r\n                }}\r\n              >\r\n                Sign up\r\n              </Button>\r\n            ) : (\r\n              <Button\r\n                onClick={handleLogout}\r\n                color={'white'}\r\n                bg={'red.400'}\r\n                href={'#'}\r\n                _hover={{\r\n                  bg: 'red.300',\r\n                }}\r\n              >\r\n                Log out\r\n              </Button>\r\n            )}\r\n            <Box display={{ base: 'inline-flex', md: 'none' }}>\r\n              <IconButton\r\n                display={{ base: 'flex', md: 'none' }}\r\n                aria-label=\"Open menu\"\r\n                fontSize=\"20px\"\r\n                color={useColorModeValue('gray.800', 'inherit')}\r\n                variant=\"ghost\"\r\n                icon={<AiOutlineMenu />}\r\n                onClick={mobileNav.onOpen}\r\n              />\r\n\r\n              <VStack\r\n                pos=\"absolute\"\r\n                top={0}\r\n                left={0}\r\n                right={0}\r\n                display={mobileNav.isOpen ? 'flex' : 'none'}\r\n                flexDirection=\"column\"\r\n                p={2}\r\n                pb={4}\r\n                m={2}\r\n                bg={bg}\r\n                spacing={3}\r\n                rounded=\"sm\"\r\n                shadow=\"sm\"\r\n              >\r\n                <CloseButton\r\n                  aria-label=\"Close menu\"\r\n                  onClick={mobileNav.onClose}\r\n                />\r\n\r\n                <Button w=\"full\" variant=\"ghost\">\r\n                  Features\r\n                </Button>\r\n                <Button w=\"full\" variant=\"ghost\">\r\n                  Pricing\r\n                </Button>\r\n                {!userDetails.get() ? (\r\n                  <Button\r\n                    w=\"full\"\r\n                    variant=\"ghost\"\r\n                    onClick={() => setLoginModalOpen(true)}\r\n                  >\r\n                    Sign in\r\n                  </Button>\r\n                ) : (\r\n                  <Button w=\"full\" variant=\"ghost\">\r\n                    Signed in as {userDetails.get().username}\r\n                  </Button>\r\n                )}\r\n              </VStack>\r\n            </Box>\r\n          </HStack>\r\n        </Flex>\r\n      </chakra.header>\r\n      <RegisterModal\r\n        isOpen={registerModalOpen}\r\n        setRegisterModalOpen={setRegisterModalOpen}\r\n      />\r\n      <LoginModal\r\n        isOpen={loginModalOpen}\r\n        setLoginModalOpen={setLoginModalOpen}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Navbar from '../components/Navbar';\r\n\r\nexport default function HomeScreen() {\r\n  return <Navbar />;\r\n}\r\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport HomeScreen from './screens/HomeScreen';\n\nexport default function App() {\n  return (\n    <Router>\n      <Route path=\"/\" exact component={HomeScreen} />\n    </Router>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { ChakraProvider } from '@chakra-ui/react';\n\nReactDOM.render(\n  <ChakraProvider>\n    <App />\n  </ChakraProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}